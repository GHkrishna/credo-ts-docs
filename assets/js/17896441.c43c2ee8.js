(self.webpackChunkcredo_ts_docs=self.webpackChunkcredo_ts_docs||[]).push([[7918],{7083:(n,e,t)=>{"use strict";t.d(e,{Z:()=>g});var o=t(7294),r=t(6010),i=t(5281),s=t(5999);const a={admonition:"admonition_WoCw",admonitionHeading:"admonitionHeading_TMsN",admonitionIcon:"admonitionIcon_Ibzs",admonitionContent:"admonitionContent_vXIg"};const d={note:{infimaClassName:"secondary",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 14 16"},o.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:o.createElement(s.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 12 16"},o.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:o.createElement(s.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 12 16"},o.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:o.createElement(s.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 14 16"},o.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:o.createElement(s.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 16 16"},o.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:o.createElement(s.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")},holder:{infimaClassName:"holder",emoji:"\ud83d\uddc4",label:o.createElement(s.Z,{id:"theme.admonition.holder",description:"The default label used for the Caution admonition (:::holder)"},"holder")},issuer:{infimaClassName:"issuer",emoji:"\ud83d\udcc4",label:o.createElement(s.Z,{id:"theme.admonition.issuer",description:"The default label used for the Caution admonition (:::issuer)"},"issuer")},verifier:{infimaClassName:"verifier",emoji:"\ud83d\udc6e",label:o.createElement(s.Z,{id:"theme.admonition.verifier",description:"The default label used for the Verifier admonition (:::verifier)"},"verifier")},bob:{infimaClassName:"bob",emoji:"\ud83e\uddd4",label:o.createElement(s.Z,{id:"theme.admonition.bob",description:"The default label used for the Bob admonition (:::bob)"},"bob")},acme:{infimaClassName:"acme",emoji:"\ud83c\udfe2",label:o.createElement(s.Z,{id:"theme.admonition.acme",description:"The default label used for the acme admonition (:::acme)"},"acme")}},c={secondary:"note",important:"info",success:"tip",warning:"danger"};function l(n){const{mdxAdmonitionTitle:e,rest:t}=function(n){const e=o.Children.toArray(n),t=e.find((n=>o.isValidElement(n)&&"mdxAdmonitionTitle"===n.props?.mdxType)),r=o.createElement(o.Fragment,null,e.filter((n=>n!==t)));return{mdxAdmonitionTitle:t,rest:r}}(n.children);return{...n,title:n.title??e,children:t}}function g(n){const{children:e,type:t,title:s,icon:g}=l(n),u=function(n){const e=c[n]??n,t=d[e];return t||(console.warn(`No admonition config found for admonition type "${e}". Using Info as fallback.`),d.info)}(t),m=s??u.label,{iconComponent:p,emoji:f}=u,y=g??f??o.createElement(p,null);return o.createElement("div",{className:(0,r.Z)(i.k.common.admonition,i.k.common.admonitionType(n.type),"alert",`alert--${u.infimaClassName}`,`admonition-${u.infimaClassName}`,a.admonition)},o.createElement("div",{className:a.admonitionHeading},o.createElement("span",{className:a.admonitionIcon},y),m),o.createElement("div",{className:a.admonitionContent},e))}},1415:(n,e,t)=>{"use strict";t.d(e,{Z:()=>i});var o=t(7294),r=t(8397);function i(n){return o.createElement(o.Fragment,null,o.createElement(r.Z,n))}},8573:(n,e,t)=>{"use strict";t.d(e,{Z:()=>m});var o=t(7462),r=t(7294),i=t(2389),s=t(1170),a=t(2138),d=t(4477);const c=n=>n.split(" ").find((n=>n.match(/^section-/)))?.substr(8),l=(n,e)=>{const t=`start-section-${n}`,o=`end-section-${n}`,r=e.split("\n"),i=r.indexOf(r.find((n=>n.includes(t)))),s=r.indexOf(r.find((n=>n.includes(o))));return r.slice(i+1,s).join("\r\n")},g=n=>n.split(" ").find((n=>n.match(/.(js|ts)$/))),u=n=>n.split("\n").filter((n=>!n.match(/section-/))).join("\r\n");function m(n){let{children:e,...m}=n;const p=(0,i.Z)(),f=(0,d.E)(),y=function(n){return r.Children.toArray(n).some((n=>(0,r.isValidElement)(n)))?n:Array.isArray(n)?n.join(""):n}(e),w=f.version,h="string"==typeof y?a.Z:s.Z;if(!m.metastring)return r.createElement(h,(0,o.Z)({key:String(p)},m),y);let b;try{b=t(2502)(`./${w}/src/${g(m.metastring)}`).default}catch{}const k=c(m.metastring);let v;return b&&(v=k?l(k,b):u(b)),r.createElement(h,(0,o.Z)({key:String(p)},m),v||y)}},7058:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  Agent,\n  InitConfig,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  DidExchangeState,\n  OutOfBandRecord,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\n\n// start-section-1\nconst initializeBobAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-bob',\n    walletConfig: {\n      id: 'mainBob',\n      key: 'demoagentbob00000000000000000000',\n    },\n    autoAcceptConnections: true,\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeAcmeAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-acme',\n    walletConfig: {\n      id: 'mainAcme',\n      key: 'demoagentacme0000000000000000000',\n    },\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst createNewInvitation = async (agent: Agent) => {\n  const outOfBandRecord = await agent.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n// end-section-3\n\n// start-section-4\nconst createLegacyInvitation = async (agent: Agent) => {\n  const { invitation } = await agent.oob.createLegacyInvitation()\n\n  return invitation.toUrl({ domain: 'https://example.org' })\n}\n// end-section-4\n\n// start-section-5\nconst receiveInvitation = async (agent: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await agent.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n// end-section-5\n\n// start-section-6\nconst setupConnectionListener = (agent: Agent, outOfBandRecord: OutOfBandRecord, cb: (...args: any) => void) => {\n  agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      cb()\n\n      // We exit the flow\n      process.exit(0)\n    }\n  })\n}\n\n// end-section-6\n\nconst run = async () => {\n  console.log('Initializing Bob agent...')\n  const bobAgent = await initializeBobAgent()\n  console.log('Initializing Acme agent...')\n  const acmeAgent = await initializeAcmeAgent()\n\n  console.log('Creating the invitation as Acme...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(acmeAgent)\n\n  console.log('Listening for connection changes...')\n  setupConnectionListener(acmeAgent, outOfBandRecord, () =>\n    console.log('We now have an active connection to use in the following tutorials')\n  )\n\n  console.log('Accepting the invitation as Bob...')\n  await receiveInvitation(bobAgent, invitationUrl)\n}\n\nexport default run\n\nvoid run()\n"},2151:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  InitConfig,\n  Agent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  DidExchangeState,\n  AutoAcceptCredential,\n  CredentialEventTypes,\n  CredentialState,\n  CredentialStateChangedEvent,\n  OutOfBandRecord,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\nimport { Schema } from 'indy-sdk'\nimport fetch from 'node-fetch'\n\nconst getGenesisTransaction = async (url: string) => {\n  // Legacy code has a small issue with the call-signature from node-fetch\n  // @ts-ignore\n  const response = await fetch(url)\n\n  return await response.text()\n}\n\n// start-section-1\nconst initializeHolderAgent = async () => {\n  const genesisTransactionsBCovrinTestNet = await getGenesisTransaction('http://test.bcovrin.vonx.io/genesis')\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-holder',\n    walletConfig: {\n      id: 'demo-agent-holder',\n      key: 'demoagentholder00000000000000000',\n    },\n    indyLedgers: [\n      {\n        id: 'bcovrin-test-net',\n        isProduction: false,\n        indyNamespace: 'bcovrin:test',\n        genesisTransactions: genesisTransactionsBCovrinTestNet,\n      },\n    ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3002'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeIssuerAgent = async () => {\n  const genesisTransactionsBCovrinTestNet = await getGenesisTransaction('http://test.bcovrin.vonx.io/genesis')\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-issuer',\n    walletConfig: {\n      id: 'demo-agent-issuer',\n      key: 'demoagentissuer00000000000000000',\n    },\n    publicDidSeed: 'demoissuerdidseed000000000000000',\n    indyLedgers: [\n      {\n        id: 'bcovrin-test-net',\n        isProduction: false,\n        indyNamespace: 'bcovrin:test',\n        genesisTransactions: genesisTransactionsBCovrinTestNet,\n      },\n    ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst registerSchema = async (issuer: Agent) =>\n  issuer.ledger.registerSchema({ attributes: ['name', 'age'], name: 'Identity', version: '1.0' })\n// end-section-3\n\n// start-section-4\nconst registerCredentialDefinition = async (issuer: Agent, schema: Schema) =>\n  issuer.ledger.registerCredentialDefinition({ schema, supportRevocation: false, tag: 'default' })\n// end-section-4\n\n// start-section-5\nconst setupCredentialListener = (holder: Agent) => {\n  holder.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, async ({ payload }) => {\n    switch (payload.credentialRecord.state) {\n      case CredentialState.OfferReceived:\n        console.log('received a credential')\n        // custom logic here\n        await holder.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n      case CredentialState.Done:\n        console.log(`Credential for credential id ${payload.credentialRecord.id} is accepted`)\n        // For demo purposes we exit the program here.\n        process.exit(0)\n    }\n  })\n}\n// end-section-5\n\n// start-section-6\nconst issueCredential = async (issuer: Agent, credentialDefinitionId: string, connectionId: string) =>\n  issuer.credentials.offerCredential({\n    protocolVersion: 'v1',\n    connectionId,\n    credentialFormats: {\n      indy: {\n        credentialDefinitionId,\n        attributes: [\n          { name: 'name', value: 'Jane Doe' },\n          { name: 'age', value: '23' },\n        ],\n      },\n    },\n  })\n// end-section-6\n\nconst createNewInvitation = async (issuer: Agent) => {\n  const outOfBandRecord = await issuer.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n\nconst receiveInvitation = async (holder: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await holder.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n\nconst setupConnectionListener = (\n  issuer: Agent,\n  outOfBandRecord: OutOfBandRecord,\n  cb: (...args: any) => Promise<unknown>\n) => {\n  issuer.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, async ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      await cb(payload.connectionRecord.id)\n    }\n  })\n}\n\nconst flow = (issuer: Agent) => async (connectionId: string) => {\n  console.log('Registering the schema...')\n  const schema = await registerSchema(issuer)\n  console.log('Registering the credential definition...')\n  const credentialDefinition = await registerCredentialDefinition(issuer, schema)\n  console.log('Issuing the credential...')\n  await issueCredential(issuer, credentialDefinition.id, connectionId)\n}\n\nconst run = async () => {\n  console.log('Initializing the holder...')\n  const holder = await initializeHolderAgent()\n  console.log('Initializing the issuer...')\n  const issuer = await initializeIssuerAgent()\n\n  console.log('Initializing the credential listener...')\n  setupCredentialListener(holder)\n\n  console.log('Initializing the connection...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(issuer)\n  setupConnectionListener(issuer, outOfBandRecord, flow(issuer))\n  await receiveInvitation(holder, invitationUrl)\n}\n\nvoid run()\n"},3288:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\nimport { Agent, HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\n\n// start-section-1\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({ config, dependencies: agentDependencies })\n// end-section-1\n\n// start-section-2\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\n// end-section-2\n\n// start-section-3\nconst run = async () => {\n  try {\n    await agent.initialize()\n  } catch (e) {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  }\n}\n// end-section-3\n\nvoid run()\n"},420:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\nimport { Agent, HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\n\n// start-section-1\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({ config, dependencies: agentDependencies })\n// end-section-1\n\n// start-section-2\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n// end-section-2\n\n// start-section-3\nconst run = async () => {\n  try {\n    await agent.initialize()\n  } catch (e) {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  }\n}\n// end-section-3\n\nvoid run()\n"},5343:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import { AskarModule } from '@aries-framework/askar'\nimport {\n  Agent,\n  InitConfig,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  DidExchangeState,\n  OutOfBandRecord,\n  ConnectionsModule,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\n// start-section-1\nconst initializeBobAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-bob',\n    walletConfig: {\n      id: 'mainBob',\n      key: 'demoagentbob00000000000000000000',\n    },\n  }\n\n  // A new instance of an agent is created here\n  // Askar can also be replaced by the indy-sdk if required\n  const agent = new Agent({\n    config,\n    modules: {\n      askar: new AskarModule({ ariesAskar }),\n      connections: new ConnectionsModule({ autoAcceptConnections: true }),\n    },\n    dependencies: agentDependencies,\n  })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeAcmeAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-acme',\n    walletConfig: {\n      id: 'mainAcme',\n      key: 'demoagentacme0000000000000000000',\n    },\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  // Askar can also be replaced by the indy-sdk if required\n  const agent = new Agent({\n    config,\n    modules: {\n      askar: new AskarModule({ ariesAskar }),\n      connections: new ConnectionsModule({ autoAcceptConnections: true }),\n    },\n    dependencies: agentDependencies,\n  })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst createNewInvitation = async (agent: Agent) => {\n  const outOfBandRecord = await agent.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n// end-section-3\n\n// start-section-4\nconst createLegacyInvitation = async (agent: Agent) => {\n  const { invitation } = await agent.oob.createLegacyInvitation()\n\n  return invitation.toUrl({ domain: 'https://example.org' })\n}\n// end-section-4\n\n// start-section-5\nconst receiveInvitation = async (agent: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await agent.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n// end-section-5\n\n// start-section-6\nconst setupConnectionListener = (agent: Agent, outOfBandRecord: OutOfBandRecord, cb: (...args: any) => void) => {\n  agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      cb()\n\n      // We exit the flow\n      process.exit(0)\n    }\n  })\n}\n\n// end-section-6\n\nconst run = async () => {\n  console.log('Initializing Bob agent...')\n  const bobAgent = await initializeBobAgent()\n  console.log('Initializing Acme agent...')\n  const acmeAgent = await initializeAcmeAgent()\n\n  console.log('Creating the invitation as Acme...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(acmeAgent)\n\n  console.log('Listening for connection changes...')\n  setupConnectionListener(acmeAgent, outOfBandRecord, () =>\n    console.log('We now have an active connection to use in the following tutorials')\n  )\n\n  console.log('Accepting the invitation as Bob...')\n  await receiveInvitation(bobAgent, invitationUrl)\n}\n\nexport default run\n\nvoid run()\n"},7283:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  CredentialEventTypes,\n  CredentialState,\n  CredentialStateChangedEvent,\n  DidsModule,\n  HttpOutboundTransport,\n  InitConfig,\n  WsOutboundTransport,\n  Agent,\n  CredentialsModule,\n  V2CredentialProtocol,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport {\n  IndyVdrAnonCredsRegistry,\n  IndyVdrIndyDidRegistrar,\n  IndyVdrIndyDidResolver,\n  IndyVdrModule,\n} from '@aries-framework/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport {\n  AnonCredsCredentialFormatService,\n  AnonCredsModule,\n  LegacyIndyCredentialFormatService,\n} from '@aries-framework/anoncreds'\nimport { AnonCredsRsModule } from '@aries-framework/anoncreds-rs'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\n\nconst issuerConfig: InitConfig = {\n  label: 'docs-agent-nodejs-issue-a-credential-issuer',\n  walletConfig: {\n    id: 'wallet-id-issuer',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst holderConfig: InitConfig = {\n  label: 'docs-agent-nodejs-issue-a-credential-holder',\n  walletConfig: {\n    id: 'wallet-id-holder',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nconst issuer = new Agent({\n  config: issuerConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transaction>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n    dids: new DidsModule({\n      registrars: [new IndyVdrIndyDidRegistrar()],\n      resolvers: [new IndyVdrIndyDidResolver()],\n    }),\n    credentials: new CredentialsModule({\n      credentialProtocols: [\n        new V2CredentialProtocol({\n          credentialFormats: [new LegacyIndyCredentialFormatService(), new AnonCredsCredentialFormatService()],\n        }),\n      ],\n    }),\n  },\n})\n\n// Register a simple `WebSocket` outbound transport\nissuer.registerOutboundTransport(new WsOutboundTransport())\n\n// Register a simple `Http` outbound transport\nissuer.registerOutboundTransport(new HttpOutboundTransport())\n\n// Register a simple `Http` inbound transport\nissuer.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n// end-section-1\n\n// start-section-2\nconst holder = new Agent({\n  config: holderConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transaction>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n    dids: new DidsModule({\n      resolvers: [new IndyVdrIndyDidResolver()],\n    }),\n    credentials: new CredentialsModule({\n      credentialProtocols: [\n        new V2CredentialProtocol({\n          credentialFormats: [new LegacyIndyCredentialFormatService(), new AnonCredsCredentialFormatService()],\n        }),\n      ],\n    }),\n  },\n})\n\n// Register a simple `WebSocket` outbound transport\nholder.registerOutboundTransport(new WsOutboundTransport())\n\n// Register a simple `Http` outbound transport\nholder.registerOutboundTransport(new HttpOutboundTransport())\n\n// Register a simple `Http` inbound transport\nholder.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n// end-section-2\n\n// start-section-3\nholder.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, async ({ payload }) => {\n  switch (payload.credentialRecord.state) {\n    case CredentialState.OfferReceived:\n      console.log('received a credential')\n      // custom logic here\n      await holder.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n    case CredentialState.Done:\n      console.log(`Credential for credential id ${payload.credentialRecord.id} is accepted`)\n      // For demo purposes we exit the program here.\n      process.exit(0)\n  }\n})\n// end-section-3\n\n// start-section-4\nconst indyCredentialExchangeRecord = await issuer.credentials.offerCredential({\n  protocolVersion: 'v2',\n  connectionId: '<connection id>',\n  credentialFormats: {\n    indy: {\n      credentialDefinitionId: '<credential definition id>',\n      attributes: [\n        { name: 'name', value: 'Jane Doe' },\n        { name: 'age', value: '23' },\n      ],\n    },\n  },\n})\n// end-section-4\n\n// start-section-5\nconst anonCredsCredentialExchangeRecord = issuer.credentials.offerCredential({\n  protocolVersion: 'v2',\n  connectionId: '<connection id>',\n  credentialFormats: {\n    anoncreds: {\n      credentialDefinitionId: '<credential definition id>',\n      attributes: [\n        { name: 'name', value: 'Jane Doe' },\n        { name: 'age', value: '23' },\n      ],\n    },\n  },\n})\n// end-section-5\n"},8276:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  Agent,\n  ConsoleLogger,\n  HttpOutboundTransport,\n  InitConfig,\n  LogLevel,\n  MediationRecipientModule,\n  WsOutboundTransport,\n} from '@aries-framework/core'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport { agentDependencies } from '@aries-framework/node'\nimport indySdk from 'indy-sdk'\n\n// start-section-1\nconst name = 'alice'\n\n// paste your invitation url here\n// or use the current invitation-url to connect to the public animo-mediator.\nconst mediatorInvitationUrl =\n  'https://mediator.dev.animo.id/invite?oob=eyJAdHlwZSI6Imh0dHBzOi8vZGlkY29tbS5vcmcvb3V0LW9mLWJhbmQvMS4xL2ludml0YXRpb24iLCJAaWQiOiIyMDc1MDM4YS05ZGU3LTRiODItYWUxYi1jNzBmNDg4MjYzYTciLCJsYWJlbCI6IkFuaW1vIE1lZGlhdG9yIiwiYWNjZXB0IjpbImRpZGNvbW0vYWlwMSIsImRpZGNvbW0vYWlwMjtlbnY9cmZjMTkiXSwiaGFuZHNoYWtlX3Byb3RvY29scyI6WyJodHRwczovL2RpZGNvbW0ub3JnL2RpZGV4Y2hhbmdlLzEuMCIsImh0dHBzOi8vZGlkY29tbS5vcmcvY29ubmVjdGlvbnMvMS4wIl0sInNlcnZpY2VzIjpbeyJpZCI6IiNpbmxpbmUtMCIsInNlcnZpY2VFbmRwb2ludCI6Imh0dHBzOi8vbWVkaWF0b3IuZGV2LmFuaW1vLmlkIiwidHlwZSI6ImRpZC1jb21tdW5pY2F0aW9uIiwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtvSG9RTUphdU5VUE5OV1pQcEw3RGs1SzNtQ0NDMlBpNDJGY3FwR25iampMcSJdLCJyb3V0aW5nS2V5cyI6W119LHsiaWQiOiIjaW5saW5lLTEiLCJzZXJ2aWNlRW5kcG9pbnQiOiJ3c3M6Ly9tZWRpYXRvci5kZXYuYW5pbW8uaWQiLCJ0eXBlIjoiZGlkLWNvbW11bmljYXRpb24iLCJyZWNpcGllbnRLZXlzIjpbImRpZDprZXk6ejZNa29Ib1FNSmF1TlVQTk5XWlBwTDdEazVLM21DQ0MyUGk0MkZjcXBHbmJqakxxIl0sInJvdXRpbmdLZXlzIjpbXX1dfQ'\n\nconst agentConfig: InitConfig = {\n  label: `Aries Framework JavaScript ${name}`,\n  walletConfig: {\n    id: name,\n    key: name,\n  },\n  logger: new ConsoleLogger(LogLevel.trace),\n}\n\nconst alice = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    mediationRecipient: new MediationRecipientModule({\n      mediatorInvitationUrl,\n    }),\n    indySdk: new IndySdkModule({ indySdk }),\n  },\n})\n\nalice.registerOutboundTransport(new HttpOutboundTransport())\nalice.registerOutboundTransport(new WsOutboundTransport())\n\nawait alice.initialize()\n// end-section-1\n"},768:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  Agent,\n  ConnectionsModule,\n  HttpOutboundTransport,\n  InitConfig,\n  MediationStateChangedEvent,\n  MediatorModule,\n  RoutingEventTypes,\n} from '@aries-framework/core'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport { HttpInboundTransport, agentDependencies } from '@aries-framework/node'\nimport indySdk from 'indy-sdk'\n\n// start-section-1\nconst name = 'mediator'\nconst port = 3001\n\nconst agentConfig: InitConfig = {\n  label: `Aries Framework JavaScript ${name}`,\n  walletConfig: {\n    id: name,\n    key: name,\n  },\n  endpoints: [`http://localhost:${port}`],\n}\n\nconst mediator = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    indySdk: new IndySdkModule({ indySdk }),\n    mediator: new MediatorModule({\n      autoAcceptMediationRequests: true,\n    }),\n    connections: new ConnectionsModule({\n      autoAcceptConnections: true,\n    }),\n  },\n})\n\nmediator.registerOutboundTransport(new HttpOutboundTransport())\nmediator.registerInboundTransport(new HttpInboundTransport({ port }))\n\nawait mediator.initialize()\nconst mediatorOutOfBandRecord = await mediator.oob.createInvitation({ multiUseInvitation: true })\n\nconst mediatiorInvitationUrl = mediatorOutOfBandRecord.outOfBandInvitation.toUrl({\n  domain: `http://localhost:${port}`,\n})\nconsole.log(mediatiorInvitationUrl)\n// end-section-1\n\nmediator.events\n  .observable<MediationStateChangedEvent>(RoutingEventTypes.MediationStateChanged)\n  .subscribe(({ payload }) => {\n    console.log(`${name} mediation state: ${payload.mediationRecord.state}`)\n  })\n"},2055:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import { DidsModule, InitConfig, KeyType, LogLevel, TypedArrayEncoder } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs-register-schema-and-cred-def',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport {\n  IndyVdrAnonCredsRegistry,\n  IndyVdrIndyDidRegistrar,\n  IndyVdrIndyDidResolver,\n  IndyVdrModule,\n} from '@aries-framework/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\nimport { AnonCredsRsModule } from '@aries-framework/anoncreds-rs'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport {\n  CheqdAnonCredsRegistry,\n  CheqdDidRegistrar,\n  CheqdDidResolver,\n  CheqdModule,\n  CheqdModuleConfig,\n} from '@aries-framework/cheqd'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // We do this to have access to a wallet\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    cheqd: new CheqdModule(\n      new CheqdModuleConfig({\n        networks: [\n          {\n            network: '<mainnet or testnet>',\n            cosmosPayerSeed: '<cosmos payer seed or mnemonic>',\n          },\n        ],\n      })\n    ),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry(), new CheqdAnonCredsRegistry()],\n    }),\n    dids: new DidsModule({\n      registrars: [new IndyVdrIndyDidRegistrar(), new CheqdDidRegistrar()],\n      resolvers: [new IndyVdrIndyDidResolver(), new CheqdDidResolver()],\n    }),\n  },\n})\n// end-section-1\n\n// start-section-2\nconst seed = TypedArrayEncoder.fromString(`<seed>`) // What you input on bcovrin. Should be kept secure in production!\nconst unqualifiedIndyDid = `<unqualifiedIndyDid>` // will be returned after registering seed on bcovrin\nconst indyDid = `did:indy:bcovrin:test:${unqualifiedIndyDid}`\n\nconst cheqdDid = await agent.dids.create({\n  method: 'cheqd',\n  secret: {\n    verificationMethod: {\n      id: 'key-1',\n      type: 'Ed25519VerificationKey2020',\n    },\n  },\n  options: {\n    network: 'testnet',\n    methodSpecificIdAlgo: 'uuid',\n  },\n})\n\nawait agent.dids.import({\n  did: '<did>',\n  overwrite: true,\n  privateKeys: [\n    {\n      privateKey: seed,\n      keyType: KeyType.Ed25519,\n    },\n  ],\n})\n// end-section-2\n\n// start-section-3\nconst schemaResult = await agent.modules.anoncreds.registerSchema({\n  schema: {\n    attrNames: ['name'],\n    issuerId: '<did>',\n    name: 'Example Schema to register',\n    version: '1.0.0',\n  },\n  options: {},\n})\n\nif (schemaResult.schemaState.state === 'failed') {\n  throw new Error(`Error creating schema: ${schemaResult.schemaState.reason}`)\n}\n// end-section-3\n\n// start-section-4\nconst credentialDefinitionResult = await agent.modules.anoncreds.registerCredentialDefinition({\n  credentialDefinition: {\n    tag: 'default',\n    issuerId: '<did>',\n    schemaId: schemaResult.schemaState.schemaId,\n  },\n  options: {},\n})\n\nif (credentialDefinitionResult.credentialDefinitionState.state === 'failed') {\n  throw new Error(\n    `Error creating credential definition: ${credentialDefinitionResult.credentialDefinitionState.reason}`\n  )\n}\n// end-section-4\n"},6596:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport { anoncreds } from '@hyperledger/anoncreds-react-native'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\nimport { AnonCredsRsModule } from '@aries-framework/anoncreds-rs'\nimport { IndyVdrAnonCredsRegistry } from '@aries-framework/indy-vdr'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // This is included as we need a wallet on our agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    anoncreds: new AnonCredsModule({\n      // Here we add an Indy VDR registry as an example, any AnonCreds registry\n      // can be used\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},3099:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\nimport { AnonCredsRsModule } from '@aries-framework/anoncreds-rs'\nimport { IndyVdrAnonCredsRegistry } from '@aries-framework/indy-vdr'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // This is included as we need a wallet on our agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncredsRs: new AnonCredsRsModule({\n      anoncreds,\n    }),\n    anoncreds: new AnonCredsModule({\n      // Here we add an Indy VDR registry as an example, any AnonCreds registry\n      // can be used\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},8757:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},3716:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},2107:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import { DidDocumentService, InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent, DidsModule, KeyType, DidDocument } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport {\n  CheqdAnonCredsRegistry,\n  CheqdDidRegistrar,\n  CheqdDidResolver,\n  CheqdModule,\n  CheqdModuleConfig,\n  CheqdDidCreateOptions,\n} from '@aries-framework/cheqd'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    dids: new DidsModule({\n      registrars: [new CheqdDidRegistrar()],\n      resolvers: [new CheqdDidResolver()],\n    }),\n\n    // AnonCreds\n    anoncreds: new AnonCredsModule({\n      registries: [new CheqdAnonCredsRegistry()],\n    }),\n\n    // Add cheqd module\n    cheqd: new CheqdModule(\n      new CheqdModuleConfig({\n        networks: [\n          {\n            network: '<mainnet or testnet>',\n            cosmosPayerSeed: '<cosmos payer seed or mnemonic>',\n          },\n        ],\n      })\n    ),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n\n// start-section-2\n\n// create a key pair\nconst key = await agent.wallet.createKey({\n  keyType: KeyType.Ed25519,\n})\n\n// encode public key according to the verification method\nconst ed25519PublicKeyBase58 = key.publicKeyBase58\n\n// Create a DID\nawait agent.dids.create<CheqdDidCreateOptions>({\n  method: 'cheqd',\n  secret: {},\n  options: {\n    network: 'testnet',\n  },\n  didDocument: new DidDocument({\n    id: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d',\n    controller: ['did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d'],\n    verificationMethod: [\n      {\n        id: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d#key-1',\n        type: 'Ed25519VerificationKey2018',\n        controller: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d',\n        publicKeyBase58: ed25519PublicKeyBase58,\n      },\n    ],\n    authentication: ['did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d#key-1'],\n  }),\n})\n// end-section-2\n\n// start-section-3\nawait agent.dids.create({\n  method: 'cheqd',\n  // the secret contains a the verification method type and id\n  secret: {\n    verificationMethod: {\n      id: 'key-1',\n      type: 'Ed25519VerificationKey2020',\n    },\n  },\n  // an optional methodSpecificIdAlgo parameter\n  options: {\n    network: 'testnet',\n    methodSpecificIdAlgo: 'uuid',\n  },\n})\n// end-section-3\n\n// start-section-4\nawait agent.dids.update({\n  did: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n  // Updates DID Document with an additional verification method if provided\n  secret: {\n    verificationMethod: {\n      id: 'key-2',\n      type: 'JsonWebKey2020',\n    },\n  },\n  didDocument: {\n    id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n    controller: ['did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411'],\n    verificationMethod: [\n      {\n        id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#key-1',\n        type: 'Ed25519VerificationKey2020',\n        controller: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n        publicKeyMultibase: 'z6MknkzLUEP5cxqqsaysNMWoh8NJRb3YsowTCj2D6yhwyEdj',\n      },\n    ],\n    authentication: ['did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#key-1'],\n    // updates did document with a service block\n    service: [\n      new DidDocumentService({\n        id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#rand',\n        type: 'rand',\n        serviceEndpoint: 'https://rand.in',\n      }),\n    ],\n  },\n})\n// end-section-4\n\n// start-section-5\nawait agent.dids.deactivate({\n  did: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n  // an optional versionId parameter\n  options: {\n    versionId: '3.0',\n  },\n})\n// end-section-5\n"},4056:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="// start-section-1\nimport { Agent, InitConfig } from '@aries-framework/core'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport {\n  agentDependencies,\n  IndySdkPostgresStorageConfig,\n  loadIndySdkPostgresPlugin,\n  IndySdkPostgresWalletScheme,\n} from '@aries-framework/node'\nimport indySdk from 'indy-sdk'\n\n// IndySdkPostgresStorageConfig defines interface for the Postgres plugin configuration.\nconst storageConfig = {\n  type: 'postgres_storage',\n  config: {\n    url: 'localhost:5432',\n    wallet_scheme: IndySdkPostgresWalletScheme.DatabasePerWallet,\n  },\n  credentials: {\n    account: 'postgres',\n    password: 'postgres',\n    admin_account: 'postgres',\n    admin_password: 'postgres',\n  },\n} satisfies IndySdkPostgresStorageConfig\n\n// load the postgres wallet plugin before agent initialization\nloadIndySdkPostgresPlugin(storageConfig.config, storageConfig.credentials)\n\nconst agentConfig: InitConfig = {\n  label: 'My Agent',\n  // walletConfig.id and walletConfig.key are still required\n  walletConfig: {\n    id: 'walletId',\n    key: 'testKey0000000000000000000000000',\n    // storage is added and defines the postgres plugin configuration\n    storage: storageConfig,\n  },\n}\n\nconst agent = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    indySdk: new IndySdkModule({\n      indySdk,\n    }),\n  },\n})\n// end-section-1\n"},1002:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport indySdk from 'indy-sdk-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Indy SDK module on the agent\n    indySdk: new IndySdkModule({\n      indySdk,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},2863:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport indySdk from 'indy-sdk'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Indy SDK module on the agent\n    indySdk: new IndySdkModule({\n      indySdk,\n    }),\n  },\n})\n// end-section-1\n\nawait agent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},9031:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="// start-section-1\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { IndyVdrModule } from '@aries-framework/indy-vdr'\n\nconst modules = {\n  indyVdr: new IndyVdrModule({\n    indyVdr,\n    networks: [\n      {\n        indyNamespace: 'bcovrin:test',\n        isProduction: false,\n        genesisTransactions: '<genesis_transactions>',\n        connectOnStartup: true,\n      },\n    ],\n  }),\n}\n// end-section-1\n"},4279:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport { IndyVdrAnonCredsRegistry, IndyVdrModule } from '@aries-framework/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-react-native'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis_transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},4437:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nimport { IndyVdrAnonCredsRegistry, IndyVdrModule } from '@aries-framework/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { AnonCredsModule } from '@aries-framework/anoncreds'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis_transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n    }),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},6121:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="// start-section-1\nimport type { InitConfig } from '@aries-framework/core'\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\n// end-section-2\n\n// TODO: we probably want to make this more specific to React Native,\n// so using it in a components and recommending to use the react hooks\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},1031:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="// start-section-1\nimport type { InitConfig } from '@aries-framework/core'\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\nimport { HttpInboundTransport } from '@aries-framework/node'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n// end-section-2\n\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},6033:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import { AskarModule } from '@credo-ts/askar'\nimport {\n  Agent,\n  InitConfig,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  DidExchangeState,\n  OutOfBandRecord,\n  ConnectionsModule,\n} from '@credo-ts/core'\nimport { agentDependencies, HttpInboundTransport } from '@credo-ts/node'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\n// start-section-1\nconst initializeBobAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-bob',\n    walletConfig: {\n      id: 'mainBob',\n      key: 'demoagentbob00000000000000000000',\n    },\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({\n    config,\n    modules: {\n      askar: new AskarModule({ ariesAskar }),\n      connections: new ConnectionsModule({ autoAcceptConnections: true }),\n    },\n    dependencies: agentDependencies,\n  })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeAcmeAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-acme',\n    walletConfig: {\n      id: 'mainAcme',\n      key: 'demoagentacme0000000000000000000',\n    },\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({\n    config,\n    modules: {\n      askar: new AskarModule({ ariesAskar }),\n      connections: new ConnectionsModule({ autoAcceptConnections: true }),\n    },\n    dependencies: agentDependencies,\n  })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst createNewInvitation = async (agent: Agent) => {\n  const outOfBandRecord = await agent.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n// end-section-3\n\n// start-section-4\nconst createLegacyInvitation = async (agent: Agent) => {\n  const { invitation } = await agent.oob.createLegacyInvitation()\n\n  return invitation.toUrl({ domain: 'https://example.org' })\n}\n// end-section-4\n\n// start-section-5\nconst receiveInvitation = async (agent: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await agent.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n// end-section-5\n\n// start-section-6\nconst setupConnectionListener = (agent: Agent, outOfBandRecord: OutOfBandRecord, cb: (...args: any) => void) => {\n  agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      cb()\n\n      // We exit the flow\n      process.exit(0)\n    }\n  })\n}\n\n// end-section-6\n\nconst run = async () => {\n  console.log('Initializing Bob agent...')\n  const bobAgent = await initializeBobAgent()\n  console.log('Initializing Acme agent...')\n  const acmeAgent = await initializeAcmeAgent()\n\n  console.log('Creating the invitation as Acme...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(acmeAgent)\n\n  console.log('Listening for connection changes...')\n  setupConnectionListener(acmeAgent, outOfBandRecord, () =>\n    console.log('We now have an active connection to use in the following tutorials')\n  )\n\n  console.log('Accepting the invitation as Bob...')\n  await receiveInvitation(bobAgent, invitationUrl)\n}\n\nexport default run\n\nvoid run()\n"},5536:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  CredentialEventTypes,\n  CredentialState,\n  CredentialStateChangedEvent,\n  DidsModule,\n  HttpOutboundTransport,\n  InitConfig,\n  WsOutboundTransport,\n  Agent,\n  CredentialsModule,\n  V2CredentialProtocol,\n} from '@credo-ts/core'\nimport { agentDependencies, HttpInboundTransport } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport {\n  IndyVdrAnonCredsRegistry,\n  IndyVdrIndyDidRegistrar,\n  IndyVdrIndyDidResolver,\n  IndyVdrModule,\n} from '@credo-ts/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport {\n  AnonCredsCredentialFormatService,\n  AnonCredsModule,\n  LegacyIndyCredentialFormatService,\n} from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\n\nconst issuerConfig: InitConfig = {\n  label: 'docs-agent-nodejs-issue-a-credential-issuer',\n  walletConfig: {\n    id: 'wallet-id-issuer',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst holderConfig: InitConfig = {\n  label: 'docs-agent-nodejs-issue-a-credential-holder',\n  walletConfig: {\n    id: 'wallet-id-holder',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nconst issuer = new Agent({\n  config: issuerConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transaction>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n    dids: new DidsModule({\n      registrars: [new IndyVdrIndyDidRegistrar()],\n      resolvers: [new IndyVdrIndyDidResolver()],\n    }),\n    credentials: new CredentialsModule({\n      credentialProtocols: [\n        new V2CredentialProtocol({\n          credentialFormats: [new LegacyIndyCredentialFormatService(), new AnonCredsCredentialFormatService()],\n        }),\n      ],\n    }),\n  },\n})\n\n// Register a simple `WebSocket` outbound transport\nissuer.registerOutboundTransport(new WsOutboundTransport())\n\n// Register a simple `Http` outbound transport\nissuer.registerOutboundTransport(new HttpOutboundTransport())\n\n// Register a simple `Http` inbound transport\nissuer.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n// end-section-1\n\n// start-section-2\nconst holder = new Agent({\n  config: holderConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transaction>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n    dids: new DidsModule({\n      resolvers: [new IndyVdrIndyDidResolver()],\n    }),\n    credentials: new CredentialsModule({\n      credentialProtocols: [\n        new V2CredentialProtocol({\n          credentialFormats: [new LegacyIndyCredentialFormatService(), new AnonCredsCredentialFormatService()],\n        }),\n      ],\n    }),\n  },\n})\n\n// Register a simple `WebSocket` outbound transport\nholder.registerOutboundTransport(new WsOutboundTransport())\n\n// Register a simple `Http` outbound transport\nholder.registerOutboundTransport(new HttpOutboundTransport())\n\n// Register a simple `Http` inbound transport\nholder.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n// end-section-2\n\n// start-section-3\nholder.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, async ({ payload }) => {\n  switch (payload.credentialRecord.state) {\n    case CredentialState.OfferReceived:\n      console.log('received a credential')\n      // custom logic here\n      await holder.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n    case CredentialState.Done:\n      console.log(`Credential for credential id ${payload.credentialRecord.id} is accepted`)\n      // For demo purposes we exit the program here.\n      process.exit(0)\n  }\n})\n// end-section-3\n\n// start-section-4\nconst indyCredentialExchangeRecord = await issuer.credentials.offerCredential({\n  protocolVersion: 'v2',\n  connectionId: '<connection id>',\n  credentialFormats: {\n    indy: {\n      credentialDefinitionId: '<credential definition id>',\n      attributes: [\n        { name: 'name', value: 'Jane Doe' },\n        { name: 'age', value: '23' },\n      ],\n    },\n  },\n})\n// end-section-4\n\n// start-section-5\nconst anonCredsCredentialExchangeRecord = issuer.credentials.offerCredential({\n  protocolVersion: 'v2',\n  connectionId: '<connection id>',\n  credentialFormats: {\n    anoncreds: {\n      credentialDefinitionId: '<credential definition id>',\n      attributes: [\n        { name: 'name', value: 'Jane Doe' },\n        { name: 'age', value: '23' },\n      ],\n    },\n  },\n})\n// end-section-5\n"},8249:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  Agent,\n  ConsoleLogger,\n  HttpOutboundTransport,\n  InitConfig,\n  LogLevel,\n  MediationRecipientModule,\n  WsOutboundTransport,\n} from '@credo-ts/core'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport { agentDependencies } from '@credo-ts/node'\n\n// start-section-1\nconst name = 'alice'\n\n// paste your invitation url here\n// or use the current invitation-url to connect to the public animo-mediator.\nconst mediatorInvitationUrl =\n  'https://mediator.dev.animo.id/invite?oob=eyJAdHlwZSI6Imh0dHBzOi8vZGlkY29tbS5vcmcvb3V0LW9mLWJhbmQvMS4xL2ludml0YXRpb24iLCJAaWQiOiIyMDc1MDM4YS05ZGU3LTRiODItYWUxYi1jNzBmNDg4MjYzYTciLCJsYWJlbCI6IkFuaW1vIE1lZGlhdG9yIiwiYWNjZXB0IjpbImRpZGNvbW0vYWlwMSIsImRpZGNvbW0vYWlwMjtlbnY9cmZjMTkiXSwiaGFuZHNoYWtlX3Byb3RvY29scyI6WyJodHRwczovL2RpZGNvbW0ub3JnL2RpZGV4Y2hhbmdlLzEuMCIsImh0dHBzOi8vZGlkY29tbS5vcmcvY29ubmVjdGlvbnMvMS4wIl0sInNlcnZpY2VzIjpbeyJpZCI6IiNpbmxpbmUtMCIsInNlcnZpY2VFbmRwb2ludCI6Imh0dHBzOi8vbWVkaWF0b3IuZGV2LmFuaW1vLmlkIiwidHlwZSI6ImRpZC1jb21tdW5pY2F0aW9uIiwicmVjaXBpZW50S2V5cyI6WyJkaWQ6a2V5Ono2TWtvSG9RTUphdU5VUE5OV1pQcEw3RGs1SzNtQ0NDMlBpNDJGY3FwR25iampMcSJdLCJyb3V0aW5nS2V5cyI6W119LHsiaWQiOiIjaW5saW5lLTEiLCJzZXJ2aWNlRW5kcG9pbnQiOiJ3c3M6Ly9tZWRpYXRvci5kZXYuYW5pbW8uaWQiLCJ0eXBlIjoiZGlkLWNvbW11bmljYXRpb24iLCJyZWNpcGllbnRLZXlzIjpbImRpZDprZXk6ejZNa29Ib1FNSmF1TlVQTk5XWlBwTDdEazVLM21DQ0MyUGk0MkZjcXBHbmJqakxxIl0sInJvdXRpbmdLZXlzIjpbXX1dfQ'\n\nconst agentConfig: InitConfig = {\n  label: `Credo ${name}`,\n  walletConfig: {\n    id: name,\n    key: name,\n  },\n  logger: new ConsoleLogger(LogLevel.trace),\n}\n\nconst alice = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    mediationRecipient: new MediationRecipientModule({\n      mediatorInvitationUrl,\n    }),\n    askar: new AskarModule({ ariesAskar }),\n  },\n})\n\nalice.registerOutboundTransport(new HttpOutboundTransport())\nalice.registerOutboundTransport(new WsOutboundTransport())\n\nawait alice.initialize()\n// end-section-1\n"},1676:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  Agent,\n  ConnectionsModule,\n  HttpOutboundTransport,\n  InitConfig,\n  MediationStateChangedEvent,\n  MediatorModule,\n  RoutingEventTypes,\n} from '@credo-ts/core'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport { HttpInboundTransport, agentDependencies } from '@credo-ts/node'\n\n// start-section-1\nconst name = 'mediator'\nconst port = 3001\n\nconst agentConfig: InitConfig = {\n  label: `Credo ${name}`,\n  walletConfig: {\n    id: name,\n    key: name,\n  },\n  endpoints: [`http://localhost:${port}`],\n}\n\nconst mediator = new Agent({\n  config: agentConfig,\n  dependencies: agentDependencies,\n  modules: {\n    askar: new AskarModule({ ariesAskar }),\n    mediator: new MediatorModule({\n      autoAcceptMediationRequests: true,\n    }),\n    connections: new ConnectionsModule({\n      autoAcceptConnections: true,\n    }),\n  },\n})\n\nmediator.registerOutboundTransport(new HttpOutboundTransport())\nmediator.registerInboundTransport(new HttpInboundTransport({ port }))\n\nawait mediator.initialize()\nconst mediatorOutOfBandRecord = await mediator.oob.createInvitation({ multiUseInvitation: true })\n\nconst mediatiorInvitationUrl = mediatorOutOfBandRecord.outOfBandInvitation.toUrl({\n  domain: `http://localhost:${port}`,\n})\nconsole.log(mediatiorInvitationUrl)\n// end-section-1\n\nmediator.events\n  .observable<MediationStateChangedEvent>(RoutingEventTypes.MediationStateChanged)\n  .subscribe(({ payload }) => {\n    console.log(`${name} mediation state: ${payload.mediationRecord.state}`)\n  })\n"},1104:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import { DidsModule, InitConfig, KeyType, TypedArrayEncoder } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs-register-schema-and-cred-def',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport {\n  IndyVdrAnonCredsRegistry,\n  IndyVdrIndyDidRegistrar,\n  IndyVdrIndyDidResolver,\n  IndyVdrModule,\n} from '@credo-ts/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport {\n  CheqdAnonCredsRegistry,\n  CheqdDidRegistrar,\n  CheqdDidResolver,\n  CheqdModule,\n  CheqdModuleConfig,\n} from '@credo-ts/cheqd'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // We do this to have access to a wallet\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    cheqd: new CheqdModule(\n      new CheqdModuleConfig({\n        networks: [\n          {\n            network: '<mainnet or testnet>',\n            cosmosPayerSeed: '<cosmos payer seed or mnemonic>',\n          },\n        ],\n      })\n    ),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry(), new CheqdAnonCredsRegistry()],\n      anoncreds,\n    }),\n    dids: new DidsModule({\n      registrars: [new IndyVdrIndyDidRegistrar(), new CheqdDidRegistrar()],\n      resolvers: [new IndyVdrIndyDidResolver(), new CheqdDidResolver()],\n    }),\n  },\n})\n// end-section-1\n\n// start-section-2\nconst seed = TypedArrayEncoder.fromString(`<seed>`) // What you input on bcovrin. Should be kept secure in production!\nconst unqualifiedIndyDid = `<unqualifiedIndyDid>` // will be returned after registering seed on bcovrin\nconst indyDid = `did:indy:bcovrin:test:${unqualifiedIndyDid}`\n\nconst cheqdDid = await agent.dids.create({\n  method: 'cheqd',\n  secret: {\n    verificationMethod: {\n      id: 'key-1',\n      type: 'Ed25519VerificationKey2020',\n    },\n  },\n  options: {\n    network: 'testnet',\n    methodSpecificIdAlgo: 'uuid',\n  },\n})\n\nawait agent.dids.import({\n  did: '<did>',\n  overwrite: true,\n  privateKeys: [\n    {\n      privateKey: seed,\n      keyType: KeyType.Ed25519,\n    },\n  ],\n})\n// end-section-2\n\n// start-section-3\nconst schemaResult = await agent.modules.anoncreds.registerSchema({\n  schema: {\n    attrNames: ['name'],\n    issuerId: '<did>',\n    name: 'Example Schema to register',\n    version: '1.0.0',\n  },\n  options: {},\n})\n\nif (schemaResult.schemaState.state === 'failed') {\n  throw new Error(`Error creating schema: ${schemaResult.schemaState.reason}`)\n}\n// end-section-3\n\n// start-section-4\nconst credentialDefinitionResult = await agent.modules.anoncreds.registerCredentialDefinition({\n  credentialDefinition: {\n    tag: 'default',\n    issuerId: '<did>',\n    schemaId: schemaResult.schemaState.schemaId,\n  },\n  options: {\n    supportRevocation: false,\n  },\n})\n\nif (credentialDefinitionResult.credentialDefinitionState.state === 'failed') {\n  throw new Error(\n    `Error creating credential definition: ${credentialDefinitionResult.credentialDefinitionState.reason}`\n  )\n}\n// end-section-4\n"},8182:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport { anoncreds } from '@hyperledger/anoncreds-react-native'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { IndyVdrAnonCredsRegistry } from '@credo-ts/indy-vdr'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // This is included as we need a wallet on our agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncreds: new AnonCredsModule({\n      // Here we add an Indy VDR registry as an example, any AnonCreds registry\n      // can be used\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},5905:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { IndyVdrAnonCredsRegistry } from '@credo-ts/indy-vdr'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    // This is included as we need a wallet on our agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n    anoncreds: new AnonCredsModule({\n      // Here we add an Indy VDR registry as an example, any AnonCreds registry\n      // can be used\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},3106:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},531:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},1638:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import { DidDocumentService, InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent, DidsModule, KeyType, DidDocument } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport {\n  CheqdAnonCredsRegistry,\n  CheqdDidRegistrar,\n  CheqdDidResolver,\n  CheqdModule,\n  CheqdModuleConfig,\n  CheqdDidCreateOptions,\n} from '@credo-ts/cheqd'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    dids: new DidsModule({\n      registrars: [new CheqdDidRegistrar()],\n      resolvers: [new CheqdDidResolver()],\n    }),\n\n    // AnonCreds\n    anoncreds: new AnonCredsModule({\n      registries: [new CheqdAnonCredsRegistry()],\n      anoncreds,\n    }),\n\n    // Add cheqd module\n    cheqd: new CheqdModule(\n      new CheqdModuleConfig({\n        networks: [\n          {\n            network: '<mainnet or testnet>',\n            cosmosPayerSeed: '<cosmos payer seed or mnemonic>',\n          },\n        ],\n      })\n    ),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n\n// start-section-2\n\n// create a key pair\nconst key = await agent.wallet.createKey({\n  keyType: KeyType.Ed25519,\n})\n\n// encode public key according to the verification method\nconst ed25519PublicKeyBase58 = key.publicKeyBase58\n\n// Create a DID\nawait agent.dids.create<CheqdDidCreateOptions>({\n  method: 'cheqd',\n  secret: {},\n  options: {\n    network: 'testnet',\n  },\n  didDocument: new DidDocument({\n    id: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d',\n    controller: ['did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d'],\n    verificationMethod: [\n      {\n        id: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d#key-1',\n        type: 'Ed25519VerificationKey2018',\n        controller: 'did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d',\n        publicKeyBase58: ed25519PublicKeyBase58,\n      },\n    ],\n    authentication: ['did:cheqd:testnet:92874297-d824-40ea-8ae5-364a1ec9237d#key-1'],\n  }),\n})\n// end-section-2\n\n// start-section-3\nawait agent.dids.create({\n  method: 'cheqd',\n  // the secret contains a the verification method type and id\n  secret: {\n    verificationMethod: {\n      id: 'key-1',\n      type: 'Ed25519VerificationKey2020',\n    },\n  },\n  // an optional methodSpecificIdAlgo parameter\n  options: {\n    network: 'testnet',\n    methodSpecificIdAlgo: 'uuid',\n  },\n})\n// end-section-3\n\n// start-section-4\nawait agent.dids.update({\n  did: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n  // Updates DID Document with an additional verification method if provided\n  secret: {\n    verificationMethod: {\n      id: 'key-2',\n      type: 'JsonWebKey2020',\n    },\n  },\n  didDocument: {\n    id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n    controller: ['did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411'],\n    verificationMethod: [\n      {\n        id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#key-1',\n        type: 'Ed25519VerificationKey2020',\n        controller: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n        publicKeyMultibase: 'z6MknkzLUEP5cxqqsaysNMWoh8NJRb3YsowTCj2D6yhwyEdj',\n      },\n    ],\n    authentication: ['did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#key-1'],\n    // updates did document with a service block\n    service: [\n      new DidDocumentService({\n        id: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411#rand',\n        type: 'rand',\n        serviceEndpoint: 'https://rand.in',\n      }),\n    ],\n  },\n})\n// end-section-4\n\n// start-section-5\nawait agent.dids.deactivate({\n  did: 'did:cheqd:testnet:b84817b8-43ee-4483-98c5-f03760816411',\n  // an optional versionId parameter\n  options: {\n    versionId: '3.0',\n  },\n})\n// end-section-5\n"},4613:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="// start-section-1\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { IndyVdrModule } from '@credo-ts/indy-vdr'\n\nconst modules = {\n  indyVdr: new IndyVdrModule({\n    indyVdr,\n    networks: [\n      {\n        indyNamespace: 'bcovrin:test',\n        isProduction: false,\n        genesisTransactions: '<genesis_transactions>',\n        connectOnStartup: true,\n      },\n    ],\n  }),\n}\n// end-section-1\n"},3995:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nimport { IndyVdrAnonCredsRegistry, IndyVdrModule } from '@credo-ts/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-react-native'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis_transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},5453:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@credo-ts/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\nimport { AskarModule } from '@credo-ts/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nimport { IndyVdrAnonCredsRegistry, IndyVdrModule } from '@credo-ts/indy-vdr'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { AnonCredsModule } from '@credo-ts/anoncreds'\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    indyVdr: new IndyVdrModule({\n      indyVdr,\n      networks: [\n        {\n          isProduction: false,\n          indyNamespace: 'bcovrin:test',\n          genesisTransactions: '<genesis_transactions>',\n          connectOnStartup: true,\n        },\n      ],\n    }),\n    anoncreds: new AnonCredsModule({\n      registries: [new IndyVdrAnonCredsRegistry()],\n      anoncreds,\n    }),\n    // Indy VDR can optionally be used with Askar as wallet and storage implementation\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},1308:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="// start-section-1\nimport type { InitConfig } from '@credo-ts/core'\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/react-native'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@credo-ts/core'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\n// end-section-2\n\n// TODO: we probably want to make this more specific to React Native,\n// so using it in a components and recommending to use the react hooks\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},2537:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="// start-section-1\nimport type { InitConfig } from '@credo-ts/core'\nimport { Agent } from '@credo-ts/core'\nimport { agentDependencies } from '@credo-ts/node'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@credo-ts/core'\nimport { HttpInboundTransport } from '@credo-ts/node'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n// end-section-2\n\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},2502:(n,e,t)=>{var o={"./0.3/node_modules/did-resolver/src/__tests__/resolver.test":349,"./0.3/node_modules/did-resolver/src/__tests__/resolver.test.ts":349,"./0.3/node_modules/did-resolver/src/resolver":5883,"./0.3/node_modules/did-resolver/src/resolver.ts":5883,"./0.3/node_modules/luxon/src/datetime":8105,"./0.3/node_modules/luxon/src/datetime.js":8105,"./0.3/node_modules/luxon/src/duration":6721,"./0.3/node_modules/luxon/src/duration.js":6721,"./0.3/node_modules/luxon/src/errors":4015,"./0.3/node_modules/luxon/src/errors.js":4015,"./0.3/node_modules/luxon/src/impl/conversions":8498,"./0.3/node_modules/luxon/src/impl/conversions.js":8498,"./0.3/node_modules/luxon/src/impl/diff":8998,"./0.3/node_modules/luxon/src/impl/diff.js":8998,"./0.3/node_modules/luxon/src/impl/digits":9310,"./0.3/node_modules/luxon/src/impl/digits.js":9310,"./0.3/node_modules/luxon/src/impl/english":4039,"./0.3/node_modules/luxon/src/impl/english.js":4039,"./0.3/node_modules/luxon/src/impl/formats":5303,"./0.3/node_modules/luxon/src/impl/formats.js":5303,"./0.3/node_modules/luxon/src/impl/formatter":4756,"./0.3/node_modules/luxon/src/impl/formatter.js":4756,"./0.3/node_modules/luxon/src/impl/invalid":760,"./0.3/node_modules/luxon/src/impl/invalid.js":760,"./0.3/node_modules/luxon/src/impl/locale":114,"./0.3/node_modules/luxon/src/impl/locale.js":114,"./0.3/node_modules/luxon/src/impl/regexParser":1990,"./0.3/node_modules/luxon/src/impl/regexParser.js":1990,"./0.3/node_modules/luxon/src/impl/tokenParser":4546,"./0.3/node_modules/luxon/src/impl/tokenParser.js":4546,"./0.3/node_modules/luxon/src/impl/util":7866,"./0.3/node_modules/luxon/src/impl/util.js":7866,"./0.3/node_modules/luxon/src/impl/zoneUtil":9776,"./0.3/node_modules/luxon/src/impl/zoneUtil.js":9776,"./0.3/node_modules/luxon/src/info":6965,"./0.3/node_modules/luxon/src/info.js":6965,"./0.3/node_modules/luxon/src/interval":1591,"./0.3/node_modules/luxon/src/interval.js":1591,"./0.3/node_modules/luxon/src/luxon":8004,"./0.3/node_modules/luxon/src/luxon.js":8004,"./0.3/node_modules/luxon/src/luxonFilled":9972,"./0.3/node_modules/luxon/src/luxonFilled.js":9972,"./0.3/node_modules/luxon/src/settings":2636,"./0.3/node_modules/luxon/src/settings.js":2636,"./0.3/node_modules/luxon/src/zone":6476,"./0.3/node_modules/luxon/src/zone.js":6476,"./0.3/node_modules/luxon/src/zones/IANAZone":3176,"./0.3/node_modules/luxon/src/zones/IANAZone.js":3176,"./0.3/node_modules/luxon/src/zones/fixedOffsetZone":1840,"./0.3/node_modules/luxon/src/zones/fixedOffsetZone.js":1840,"./0.3/node_modules/luxon/src/zones/invalidZone":5092,"./0.3/node_modules/luxon/src/zones/invalidZone.js":5092,"./0.3/node_modules/luxon/src/zones/localZone":5617,"./0.3/node_modules/luxon/src/zones/localZone.js":5617,"./0.3/src/create-a-connection":7058,"./0.3/src/create-a-connection.ts":7058,"./0.3/src/issue-a-credential":2151,"./0.3/src/issue-a-credential.ts":2151,"./0.3/src/set-up":420,"./0.3/src/set-up-rn":3288,"./0.3/src/set-up-rn.ts":3288,"./0.3/src/set-up.ts":420,"./0.4/node_modules/@hyperledger/anoncreds-react-native/android/src/main/AndroidManifest.xml":1960,"./0.4/node_modules/@hyperledger/anoncreds-react-native/android/src/main/java/org/hyperledger/anoncreds/AnoncredsModule.java":8854,"./0.4/node_modules/@hyperledger/anoncreds-react-native/android/src/main/java/org/hyperledger/anoncreds/AnoncredsPackage.java":2510,"./0.4/node_modules/@hyperledger/aries-askar-react-native/android/src/main/AndroidManifest.xml":8339,"./0.4/node_modules/@hyperledger/aries-askar-react-native/android/src/main/java/org/hyperledger/ariesaskar/AriesAskarModule.java":2853,"./0.4/node_modules/@hyperledger/aries-askar-react-native/android/src/main/java/org/hyperledger/ariesaskar/AriesAskarPackage.java":8093,"./0.4/node_modules/@hyperledger/indy-vdr-react-native/android/src/main/AndroidManifest.xml":6666,"./0.4/node_modules/@hyperledger/indy-vdr-react-native/android/src/main/java/org/hyperledger/indyvdr/IndyVdrModule.java":7383,"./0.4/node_modules/@hyperledger/indy-vdr-react-native/android/src/main/java/org/hyperledger/indyvdr/IndyVdrPackage.java":1138,"./0.4/src/create-a-connection":5343,"./0.4/src/create-a-connection.ts":5343,"./0.4/src/issue-a-credential":7283,"./0.4/src/issue-a-credential.ts":7283,"./0.4/src/mediation-recipient":8276,"./0.4/src/mediation-recipient.ts":8276,"./0.4/src/mediator-setup":768,"./0.4/src/mediator-setup.ts":768,"./0.4/src/register-schema-and-cred-def":2055,"./0.4/src/register-schema-and-cred-def.ts":2055,"./0.4/src/set-up":1031,"./0.4/src/set-up-anoncreds-rs":3099,"./0.4/src/set-up-anoncreds-rs-rn":6596,"./0.4/src/set-up-anoncreds-rs-rn.ts":6596,"./0.4/src/set-up-anoncreds-rs.ts":3099,"./0.4/src/set-up-askar":3716,"./0.4/src/set-up-askar-rn":8757,"./0.4/src/set-up-askar-rn.ts":8757,"./0.4/src/set-up-askar.ts":3716,"./0.4/src/set-up-cheqd":2107,"./0.4/src/set-up-cheqd.ts":2107,"./0.4/src/set-up-indy-sdk":2863,"./0.4/src/set-up-indy-sdk-postgres":4056,"./0.4/src/set-up-indy-sdk-postgres.ts":4056,"./0.4/src/set-up-indy-sdk-rn":1002,"./0.4/src/set-up-indy-sdk-rn.ts":1002,"./0.4/src/set-up-indy-sdk.ts":2863,"./0.4/src/set-up-indy-vdr":4437,"./0.4/src/set-up-indy-vdr-config":9031,"./0.4/src/set-up-indy-vdr-config.ts":9031,"./0.4/src/set-up-indy-vdr-rn":4279,"./0.4/src/set-up-indy-vdr-rn.ts":4279,"./0.4/src/set-up-indy-vdr.ts":4437,"./0.4/src/set-up-rn":6121,"./0.4/src/set-up-rn.ts":6121,"./0.4/src/set-up.ts":1031,"./current/src/create-a-connection":6033,"./current/src/create-a-connection.ts":6033,"./current/src/issue-a-credential":5536,"./current/src/issue-a-credential.ts":5536,"./current/src/mediation-recipient":8249,"./current/src/mediation-recipient.ts":8249,"./current/src/mediator-setup":1676,"./current/src/mediator-setup.ts":1676,"./current/src/register-schema-and-cred-def":1104,"./current/src/register-schema-and-cred-def.ts":1104,"./current/src/set-up":2537,"./current/src/set-up-anoncreds":5905,"./current/src/set-up-anoncreds-rn":8182,"./current/src/set-up-anoncreds-rn.ts":8182,"./current/src/set-up-anoncreds.ts":5905,"./current/src/set-up-askar":531,"./current/src/set-up-askar-rn":3106,"./current/src/set-up-askar-rn.ts":3106,"./current/src/set-up-askar.ts":531,"./current/src/set-up-cheqd":1638,"./current/src/set-up-cheqd.ts":1638,"./current/src/set-up-indy-vdr":5453,"./current/src/set-up-indy-vdr-config":4613,"./current/src/set-up-indy-vdr-config.ts":4613,"./current/src/set-up-indy-vdr-rn":3995,"./current/src/set-up-indy-vdr-rn.ts":3995,"./current/src/set-up-indy-vdr.ts":5453,"./current/src/set-up-rn":1308,"./current/src/set-up-rn.ts":1308,"./current/src/set-up.ts":2537};function r(n){var e=i(n);return t(e)}function i(n){if(!t.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}r.keys=function(){return Object.keys(o)},r.resolve=i,n.exports=r,r.id=2502}}]);