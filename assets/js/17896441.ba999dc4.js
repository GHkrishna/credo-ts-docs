(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7918],{7083:(n,e,t)=>{"use strict";t.d(e,{Z:()=>g});var o=t(7294),i=t(6010),a=t(5281),r=t(5999);const s={admonition:"admonition_WoCw",admonitionHeading:"admonitionHeading_TMsN",admonitionIcon:"admonitionIcon_Ibzs",admonitionContent:"admonitionContent_vXIg"};const c={note:{infimaClassName:"secondary",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 14 16"},o.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:o.createElement(r.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 12 16"},o.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:o.createElement(r.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 12 16"},o.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:o.createElement(r.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 14 16"},o.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:o.createElement(r.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 16 16"},o.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:o.createElement(r.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")},holder:{infimaClassName:"holder",emoji:"\ud83d\uddc4",label:o.createElement(r.Z,{id:"theme.admonition.holder",description:"The default label used for the Caution admonition (:::holder)"},"holder")},issuer:{infimaClassName:"issuer",emoji:"\ud83d\udcc4",label:o.createElement(r.Z,{id:"theme.admonition.issuer",description:"The default label used for the Caution admonition (:::issuer)"},"issuer")},verifier:{infimaClassName:"verifier",emoji:"\ud83d\udc6e",label:o.createElement(r.Z,{id:"theme.admonition.verifier",description:"The default label used for the Verifier admonition (:::verifier)"},"verifier")},bob:{infimaClassName:"bob",emoji:"\ud83e\uddd4",label:o.createElement(r.Z,{id:"theme.admonition.bob",description:"The default label used for the Bob admonition (:::bob)"},"bob")},acme:{infimaClassName:"acme",emoji:"\ud83c\udfe2",label:o.createElement(r.Z,{id:"theme.admonition.acme",description:"The default label used for the acme admonition (:::acme)"},"acme")}},d={secondary:"note",important:"info",success:"tip",warning:"danger"};function l(n){const{mdxAdmonitionTitle:e,rest:t}=function(n){const e=o.Children.toArray(n),t=e.find((n=>o.isValidElement(n)&&"mdxAdmonitionTitle"===n.props?.mdxType)),i=o.createElement(o.Fragment,null,e.filter((n=>n!==t)));return{mdxAdmonitionTitle:t,rest:i}}(n.children);return{...n,title:n.title??e,children:t}}function g(n){const{children:e,type:t,title:r,icon:g}=l(n),u=function(n){const e=d[n]??n,t=c[e];return t||(console.warn(`No admonition config found for admonition type "${e}". Using Info as fallback.`),c.info)}(t),p=r??u.label,{iconComponent:m,emoji:f}=u,h=g??f??o.createElement(m,null);return o.createElement("div",{className:(0,i.Z)(a.k.common.admonition,a.k.common.admonitionType(n.type),"alert",`alert--${u.infimaClassName}`,`admonition-${u.infimaClassName}`,s.admonition)},o.createElement("div",{className:s.admonitionHeading},o.createElement("span",{className:s.admonitionIcon},h),p),o.createElement("div",{className:s.admonitionContent},e))}},1415:(n,e,t)=>{"use strict";t.d(e,{Z:()=>a});var o=t(7294),i=t(8397);function a(n){return o.createElement(o.Fragment,null,o.createElement(i.Z,n))}},8573:(n,e,t)=>{"use strict";t.d(e,{Z:()=>p});var o=t(7462),i=t(7294),a=t(2389),r=t(1170),s=t(2138),c=t(4477);const d=n=>n.split(" ").find((n=>n.match(/^section-/)))?.substr(8),l=(n,e)=>{const t=`start-section-${n}`,o=`end-section-${n}`,i=e.split("\n"),a=i.indexOf(i.find((n=>n.includes(t)))),r=i.indexOf(i.find((n=>n.includes(o))));return i.slice(a+1,r).join("\r\n")},g=n=>n.split(" ").find((n=>n.match(/.(js|ts)$/))),u=n=>n.split("\n").filter((n=>!n.match(/section-/))).join("\r\n");function p(n){let{children:e,...p}=n;const m=(0,a.Z)(),f=(0,c.E)(),h=function(n){return i.Children.toArray(n).some((n=>(0,i.isValidElement)(n)))?n:Array.isArray(n)?n.join(""):n}(e),b=f.version,w="string"==typeof h?s.Z:r.Z;if(!p.metastring)return i.createElement(w,(0,o.Z)({key:String(m)},p),h);let v;try{v=t(2502)(`./${b}/src/${g(p.metastring)}`).default}catch{}const C=d(p.metastring);let y;return v&&(y=C?l(C,v):u(v)),i.createElement(w,(0,o.Z)({key:String(m)},p),y||h)}},7058:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  Agent,\n  InitConfig,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  DidExchangeState,\n  OutOfBandRecord,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\n\n// start-section-1\nconst initializeBobAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-bob',\n    walletConfig: {\n      id: 'mainBob',\n      key: 'demoagentbob00000000000000000000',\n    },\n    autoAcceptConnections: true,\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeAcmeAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-acme',\n    walletConfig: {\n      id: 'mainAcme',\n      key: 'demoagentacme0000000000000000000',\n    },\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst createNewInvitation = async (agent: Agent) => {\n  const outOfBandRecord = await agent.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n// end-section-3\n\n// start-section-4\nconst createLegacyInvitation = async (agent: Agent) => {\n  const { invitation } = await agent.oob.createLegacyInvitation()\n\n  return invitation.toUrl({ domain: 'https://example.org' })\n}\n// end-section-4\n\n// start-section-5\nconst receiveInvitation = async (agent: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await agent.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n// end-section-5\n\n// start-section-6\nconst setupConnectionListener = (agent: Agent, outOfBandRecord: OutOfBandRecord, cb: (...args: any) => void) => {\n  agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      cb()\n\n      // We exit the flow\n      process.exit(0)\n    }\n  })\n}\n\n// end-section-6\n\nconst run = async () => {\n  console.log('Initializing Bob agent...')\n  const bobAgent = await initializeBobAgent()\n  console.log('Initializing Acme agent...')\n  const acmeAgent = await initializeAcmeAgent()\n\n  console.log('Creating the invitation as Acme...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(acmeAgent)\n\n  console.log('Listening for connection changes...')\n  setupConnectionListener(acmeAgent, outOfBandRecord, () =>\n    console.log('We now have an active connection to use in the following tutorials')\n  )\n\n  console.log('Accepting the invitation as Bob...')\n  await receiveInvitation(bobAgent, invitationUrl)\n}\n\nexport default run\n\nvoid run()\n"},2151:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  InitConfig,\n  Agent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  DidExchangeState,\n  AutoAcceptCredential,\n  CredentialEventTypes,\n  CredentialState,\n  CredentialStateChangedEvent,\n  OutOfBandRecord,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\nimport { Schema } from 'indy-sdk'\nimport fetch from 'node-fetch'\n\nconst getGenesisTransaction = async (url: string) => {\n  const response = await fetch(url)\n\n  return await response.text()\n}\n\n// start-section-1\nconst initializeHolderAgent = async () => {\n  const genesisTransactionsBCovrinTestNet = await getGenesisTransaction('http://test.bcovrin.vonx.io/genesis')\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-holder',\n    walletConfig: {\n      id: 'demo-agent-holder',\n      key: 'demoagentholder00000000000000000',\n    },\n    indyLedgers: [\n      {\n        id: 'bcovrin-test-net',\n        isProduction: false,\n        indyNamespace: 'bcovrin:test',\n        genesisTransactions: genesisTransactionsBCovrinTestNet,\n      },\n    ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3002'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeIssuerAgent = async () => {\n  const genesisTransactionsBCovrinTestNet = await getGenesisTransaction('http://test.bcovrin.vonx.io/genesis')\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-issuer',\n    walletConfig: {\n      id: 'demo-agent-issuer',\n      key: 'demoagentissuer00000000000000000',\n    },\n    publicDidSeed: 'demoissuerdidseed000000000000000',\n    indyLedgers: [\n      {\n        id: 'bcovrin-test-net',\n        isProduction: false,\n        indyNamespace: 'bcovrin:test',\n        genesisTransactions: genesisTransactionsBCovrinTestNet,\n      },\n    ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst registerSchema = async (issuer: Agent) =>\n  issuer.ledger.registerSchema({ attributes: ['name', 'age'], name: 'Identity', version: '1.0' })\n// end-section-3\n\n// start-section-4\nconst registerCredentialDefinition = async (issuer: Agent, schema: Schema) =>\n  issuer.ledger.registerCredentialDefinition({ schema, supportRevocation: false, tag: 'default' })\n// end-section-4\n\n// start-section-5\nconst setupCredentialListener = (holder: Agent) => {\n  holder.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, async ({ payload }) => {\n    switch (payload.credentialRecord.state) {\n      case CredentialState.OfferReceived:\n        console.log('received a credential')\n        // custom logic here\n        await holder.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n      case CredentialState.Done:\n        console.log(`Credential for credential id ${payload.credentialRecord.id} is accepted`)\n        // For demo purposes we exit the program here.\n        process.exit(0)\n    }\n  })\n}\n// end-section-5\n\n// start-section-6\nconst issueCredential = async (issuer: Agent, credentialDefinitionId: string, connectionId: string) =>\n  issuer.credentials.offerCredential({\n    protocolVersion: 'v1',\n    connectionId,\n    credentialFormats: {\n      indy: {\n        credentialDefinitionId,\n        attributes: [\n          { name: 'name', value: 'Jane Doe' },\n          { name: 'age', value: '23' },\n        ],\n      },\n    },\n  })\n// end-section-6\n\nconst createNewInvitation = async (issuer: Agent) => {\n  const outOfBandRecord = await issuer.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n\nconst receiveInvitation = async (holder: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await holder.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n\nconst setupConnectionListener = (\n  issuer: Agent,\n  outOfBandRecord: OutOfBandRecord,\n  cb: (...args: any) => Promise<unknown>\n) => {\n  issuer.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, async ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      await cb(payload.connectionRecord.id)\n    }\n  })\n}\n\nconst flow = (issuer: Agent) => async (connectionId: string) => {\n  console.log('Registering the schema...')\n  const schema = await registerSchema(issuer)\n  console.log('Registering the credential definition...')\n  const credentialDefinition = await registerCredentialDefinition(issuer, schema)\n  console.log('Issuing the credential...')\n  await issueCredential(issuer, credentialDefinition.id, connectionId)\n}\n\nconst run = async () => {\n  console.log('Initializing the holder...')\n  const holder = await initializeHolderAgent()\n  console.log('Initializing the issuer...')\n  const issuer = await initializeIssuerAgent()\n\n  console.log('Initializing the credential listener...')\n  setupCredentialListener(holder)\n\n  console.log('Initializing the connection...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(issuer)\n  setupConnectionListener(issuer, outOfBandRecord, flow(issuer))\n  await receiveInvitation(holder, invitationUrl)\n}\n\nvoid run()\n"},3288:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\nimport { Agent, HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\n\n// start-section-1\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({ config, dependencies: agentDependencies })\n// end-section-1\n\n// start-section-2\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\n// end-section-2\n\n// start-section-3\nconst run = async () => {\n  try {\n    await agent.initialize()\n  } catch (e) {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  }\n}\n// end-section-3\n\nvoid run()\n"},420:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\nimport { Agent, HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\n\n// start-section-1\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({ config, dependencies: agentDependencies })\n// end-section-1\n\n// start-section-2\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n// end-section-2\n\n// start-section-3\nconst run = async () => {\n  try {\n    await agent.initialize()\n  } catch (e) {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  }\n}\n// end-section-3\n\nvoid run()\n"},6033:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  Agent,\n  InitConfig,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  DidExchangeState,\n  OutOfBandRecord,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\n\n// start-section-1\nconst initializeBobAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-bob',\n    walletConfig: {\n      id: 'mainBob',\n      key: 'demoagentbob00000000000000000000',\n    },\n    autoAcceptConnections: true,\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeAcmeAgent = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-acme',\n    walletConfig: {\n      id: 'mainAcme',\n      key: 'demoagentacme0000000000000000000',\n    },\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\nconst createNewInvitation = async (agent: Agent) => {\n  const outOfBandRecord = await agent.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n// end-section-3\n\n// start-section-4\nconst createLegacyInvitation = async (agent: Agent) => {\n  const { invitation } = await agent.oob.createLegacyInvitation()\n\n  return invitation.toUrl({ domain: 'https://example.org' })\n}\n// end-section-4\n\n// start-section-5\nconst receiveInvitation = async (agent: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await agent.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n// end-section-5\n\n// start-section-6\nconst setupConnectionListener = (agent: Agent, outOfBandRecord: OutOfBandRecord, cb: (...args: any) => void) => {\n  agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      cb()\n\n      // We exit the flow\n      process.exit(0)\n    }\n  })\n}\n\n// end-section-6\n\nconst run = async () => {\n  console.log('Initializing Bob agent...')\n  const bobAgent = await initializeBobAgent()\n  console.log('Initializing Acme agent...')\n  const acmeAgent = await initializeAcmeAgent()\n\n  console.log('Creating the invitation as Acme...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(acmeAgent)\n\n  console.log('Listening for connection changes...')\n  setupConnectionListener(acmeAgent, outOfBandRecord, () =>\n    console.log('We now have an active connection to use in the following tutorials')\n  )\n\n  console.log('Accepting the invitation as Bob...')\n  await receiveInvitation(bobAgent, invitationUrl)\n}\n\nexport default run\n\nvoid run()\n"},5536:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import {\n  InitConfig,\n  Agent,\n  WsOutboundTransport,\n  HttpOutboundTransport,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  DidExchangeState,\n  AutoAcceptCredential,\n  CredentialEventTypes,\n  CredentialState,\n  CredentialStateChangedEvent,\n  OutOfBandRecord,\n} from '@aries-framework/core'\nimport { agentDependencies, HttpInboundTransport } from '@aries-framework/node'\nimport { Schema } from 'indy-sdk'\nimport fetch from 'node-fetch'\n\nconst getGenesisTransaction = async (url: string) => {\n  const response = await fetch(url)\n\n  return await response.text()\n}\n\n// start-section-1\nconst initializeHolderAgent = async () => {\n  const genesisTransactionsBCovrinTestNet = await getGenesisTransaction('http://test.bcovrin.vonx.io/genesis')\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: 'demo-agent-holder',\n    walletConfig: {\n      id: 'demo-agent-holder',\n      key: 'demoagentholder00000000000000000',\n    },\n    // indyLedgers: [\n    //   {\n    //     id: 'bcovrin-test-net',\n    //     isProduction: false,\n    //     indyNamespace: 'bcovrin:test',\n    //     genesisTransactions: genesisTransactionsBCovrinTestNet,\n    //   },\n    // ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3002'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3002 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-1\n\n// start-section-2\nconst initializeIssuerAgent = async () => {\n  const genesisTransactionsBCovrinTestNet = await getGenesisTransaction('http://test.bcovrin.vonx.io/genesis')\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: 'demo-agent-issuer',\n    walletConfig: {\n      id: 'demo-agent-issuer',\n      key: 'demoagentissuer00000000000000000',\n    },\n    // publicDidSeed: 'demoissuerdidseed000000000000000',\n    // indyLedgers: [\n    //   {\n    //     id: 'bcovrin-test-net',\n    //     isProduction: false,\n    //     indyNamespace: 'bcovrin:test',\n    //     genesisTransactions: genesisTransactionsBCovrinTestNet,\n    //   },\n    // ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n    autoAcceptConnections: true,\n    endpoints: ['http://localhost:3001'],\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent({ config, dependencies: agentDependencies })\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3001 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  return agent\n}\n// end-section-2\n\n// start-section-3\n// const registerSchema = async (issuer: Agent) =>\n//   issuer.ledger.registerSchema({ attributes: ['name', 'age'], name: 'Identity', version: '1.0' })\n// end-section-3\n\n// start-section-4\n// const registerCredentialDefinition = async (issuer: Agent, schema: Schema) =>\n//   issuer.ledger.registerCredentialDefinition({ schema, supportRevocation: false, tag: 'default' })\n// end-section-4\n\n// start-section-5\nconst setupCredentialListener = (holder: Agent) => {\n  holder.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, async ({ payload }) => {\n    switch (payload.credentialRecord.state) {\n      case CredentialState.OfferReceived:\n        console.log('received a credential')\n        // custom logic here\n        await holder.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n      case CredentialState.Done:\n        console.log(`Credential for credential id ${payload.credentialRecord.id} is accepted`)\n        // For demo purposes we exit the program here.\n        process.exit(0)\n    }\n  })\n}\n// end-section-5\n\n// start-section-6\n// const issueCredential = async (issuer: Agent, credentialDefinitionId: string, connectionId: string) =>\n//   issuer.credentials.offerCredential({\n//     protocolVersion: 'v2',\n//     connectionId,\n//     credentialFormats: {\n//       indy: {\n//         credentialDefinitionId,\n//         attributes: [\n//           { name: 'name', value: 'Jane Doe' },\n//           { name: 'age', value: '23' },\n//         ],\n//       },\n//     },\n//   })\n// end-section-6\n\nconst createNewInvitation = async (issuer: Agent) => {\n  const outOfBandRecord = await issuer.oob.createInvitation()\n\n  return {\n    invitationUrl: outOfBandRecord.outOfBandInvitation.toUrl({ domain: 'https://example.org' }),\n    outOfBandRecord,\n  }\n}\n\nconst receiveInvitation = async (holder: Agent, invitationUrl: string) => {\n  const { outOfBandRecord } = await holder.oob.receiveInvitationFromUrl(invitationUrl)\n\n  return outOfBandRecord\n}\n\nconst setupConnectionListener = (\n  issuer: Agent,\n  outOfBandRecord: OutOfBandRecord,\n  cb: (...args: any) => Promise<unknown>\n) => {\n  issuer.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, async ({ payload }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out-of-band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      await cb(payload.connectionRecord.id)\n    }\n  })\n}\n\nconst flow = (issuer: Agent) => async (connectionId: string) => {\n  // console.log('Registering the schema...')\n  // const schema = await registerSchema(issuer)\n  // console.log('Registering the credential definition...')\n  // const credentialDefinition = await registerCredentialDefinition(issuer, schema)\n  // console.log('Issuing the credential...')\n  // await issueCredential(issuer, credentialDefinition.id, connectionId)\n}\n\nconst run = async () => {\n  console.log('Initializing the holder...')\n  const holder = await initializeHolderAgent()\n  console.log('Initializing the issuer...')\n  const issuer = await initializeIssuerAgent()\n\n  console.log('Initializing the credential listener...')\n  setupCredentialListener(holder)\n\n  console.log('Initializing the connection...')\n  const { outOfBandRecord, invitationUrl } = await createNewInvitation(issuer)\n  setupConnectionListener(issuer, outOfBandRecord, flow(issuer))\n  await receiveInvitation(holder, invitationUrl)\n}\n\nvoid run()\n"},3106:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},531:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { AskarModule } from '@aries-framework/askar'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Askar module on the agent\n    askar: new AskarModule({\n      ariesAskar,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},6383:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport indySdk from 'indy-sdk-react-native'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Indy SDK module on the agent\n    indySdk: new IndySdkModule({\n      indySdk,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},8555:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="import type { InitConfig } from '@aries-framework/core'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\n// start-section-1\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\nimport { IndySdkModule } from '@aries-framework/indy-sdk'\nimport * as indySdk from 'indy-sdk'\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n  modules: {\n    // Register the Indy SDK module on the agent\n    indySdk: new IndySdkModule({\n      indySdk,\n    }),\n  },\n})\n// end-section-1\n\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n"},1308:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="// start-section-1\nimport type { InitConfig } from '@aries-framework/core'\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/react-native'\n\nconst config: InitConfig = {\n  label: 'docs-agent-react-native',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\n// end-section-2\n\n// TODO: we probably want to make this more specific to React Native,\n// so using it in a components and recommending to use the react hooks\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},2537:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o="// start-section-1\nimport type { InitConfig } from '@aries-framework/core'\nimport { Agent } from '@aries-framework/core'\nimport { agentDependencies } from '@aries-framework/node'\n\nconst config: InitConfig = {\n  label: 'docs-agent-nodejs',\n  walletConfig: {\n    id: 'wallet-id',\n    key: 'testkey0000000000000000000000000',\n  },\n}\n\nconst agent = new Agent({\n  config,\n  dependencies: agentDependencies,\n})\n// end-section-1\n\n// start-section-2\nimport { HttpOutboundTransport, WsOutboundTransport } from '@aries-framework/core'\nimport { HttpInboundTransport } from '@aries-framework/node'\n\n// ... agent setup from prevous section ...\n\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n// end-section-2\n\n// start-section-3\nagent\n  .initialize()\n  .then(() => {\n    console.log('Agent initialized!')\n  })\n  .catch((e) => {\n    console.error(`Something went wrong while setting up the agent! Message: ${e}`)\n  })\n// end-section-3\n"},2502:(n,e,t)=>{var o={"./0.3/src/create-a-connection":7058,"./0.3/src/create-a-connection.ts":7058,"./0.3/src/issue-a-credential":2151,"./0.3/src/issue-a-credential.ts":2151,"./0.3/src/set-up":420,"./0.3/src/set-up-rn":3288,"./0.3/src/set-up-rn.ts":3288,"./0.3/src/set-up.ts":420,"./current/src/create-a-connection":6033,"./current/src/create-a-connection.ts":6033,"./current/src/issue-a-credential":5536,"./current/src/issue-a-credential.ts":5536,"./current/src/set-up":2537,"./current/src/set-up-askar":531,"./current/src/set-up-askar-rn":3106,"./current/src/set-up-askar-rn.ts":3106,"./current/src/set-up-askar.ts":531,"./current/src/set-up-indy-sdk":8555,"./current/src/set-up-indy-sdk-rn":6383,"./current/src/set-up-indy-sdk-rn.ts":6383,"./current/src/set-up-indy-sdk.ts":8555,"./current/src/set-up-rn":1308,"./current/src/set-up-rn.ts":1308,"./current/src/set-up.ts":2537};function i(n){var e=a(n);return t(e)}function a(n){if(!t.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}i.keys=function(){return Object.keys(o)},i.resolve=a,n.exports=i,i.id=2502}}]);